name: CI - Validation Pull Request

on:
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  # Job 1 : Build et tests Backend
  backend-tests:
    name: Backend - Build & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build Backend
        working-directory: ./backend
        run: mvn clean compile

      - name: Run Unit Tests
        working-directory: ./backend
        run: mvn test

      - name: Run Integration Tests
        working-directory: ./backend
        run: mvn verify -DskipUnitTests

      - name: Generate Test Coverage
        working-directory: ./backend
        run: mvn jacoco:report

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/target/site/jacoco/jacoco.xml
          flags: backend

  # Job 2 : Build Frontend
  frontend-build:
    name: Frontend - Build & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint code
        working-directory: ./frontend
        run: npm run lint

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: https://apontaja.com/api

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

  # Job 3 : Analyse qualité du code avec SonarCloud
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour l'analyse complète

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        working-directory: ./backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=apontaja

  # Job 4 : Vérification des Dockerfiles
  docker-validation:
    name: Docker - Validate Dockerfiles
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Backend Dockerfile
        run: docker build --no-cache -t apontaja-backend:test ./backend

      - name: Validate Frontend Dockerfile
        run: |
          docker build --no-cache \
            --build-arg VITE_API_URL=https://apontaja.com/api \
            -t apontaja-frontend:test ./frontend

      - name: Validate docker-compose
        run: docker compose config

  # Job 5 : Vérification de sécurité
  security-scan:
    name: Security - Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6 : Résumé final
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, sonarcloud, docker-validation, security-scan]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          if [ "${{ needs.backend-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-tests.result }}" != "success" ] || \
             [ "${{ needs.sonarcloud.result }}" != "success" ] || \
             [ "${{ needs.docker-validation.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "❌ CI Failed - Please fix the issues before merging"
            exit 1
          else
            echo "✅ All checks passed - Ready to merge!"
          fi